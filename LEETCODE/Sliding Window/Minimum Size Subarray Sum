class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        if(nums[0]>=target)
        {
            return 1;
        }
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]>=target)
            {
                return 1;
            }
            else
            {
                nums[i]=nums[i]+nums[i-1];
            }
        }
        int a=nums[nums.size()-1]-target;
        if(a<0)
        {
            return 0;
        }
        int val=nums.size();
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(nums[i]-target<=0)
            {
                break;
            }
            int b=nums[i]-target;
            int j=0;
            int k=i-1;
            while(j<k)
            {
                if(nums[j]==b)
                {
                    int d=(i-j);
                    val=min(val,d);
                    break;
                }
                else if(nums[k]==b)
                {
                    int f=i-k;
                    val=min(val,f);
                    break;
                }
                else if(k-j==1)
                {
                    int o=i-k+1;
                    val=min(val,o);
                    break;
                }
                int x=(j+k)/2;
                if(nums[x]<b)
                {
                    j=x;
                }
                else
                {
                    k=x;
                }
            }
        }
        return val;
    }
};
//NOW modify this in O(N) time complexity
/*
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int result=INT_MAX;
        int sum=0;
        int l=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(sum>=target)
            {
                while(sum>= target)
                {
                    sum-=nums[l];
                    l++;
                }
                int a=i-l +1 +1;
                result=min(result,a);
            }
        }
        if(result==INT_MAX)
        {
            return 0;
        }
        return result;
    }
};
*/
