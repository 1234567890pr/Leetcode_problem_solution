//url:https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        Node *temp=root;
        if(root==NULL)
        {
            return root;
        }
        int count=0;
        vector<vector<Node *>>v1;
        f1(temp,count,v1);
        for(int i=0;i<v1.size();i++)
        {
            for(int j=0;j<v1[i].size();j++)
            {
                if(j==v1[i].size()-1)
                {
                    v1[i][j]->next=NULL;
                }
                else
                {
                    v1[i][j]->next=v1[i][j+1];
                }
            }
        }
        return root;
    }
    void f1(Node *temp,int count,vector<vector<Node*>>&v1)
    {
        if(v1.size()>count)
        {
            v1[count].push_back(temp);
        }
        else
        {
            vector<Node*>v2;
            v2.push_back(temp);
            v1.push_back(v2);
        }
        if(temp->left == NULL && temp->right==NULL)
        {
            return ;
        }
        count=count+1;
        if(temp->left != NULL)
        {
            f1(temp->left,count,v1);
        }
        if(temp->right!=NULL)
        {
            f1(temp->right,count,v1);
        }
    }
};
