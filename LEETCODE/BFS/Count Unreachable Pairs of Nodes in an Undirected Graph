//URL: https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/
class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<vector<int>>v1(n);
        for(int i=0;i<edges.size();i++)
        {
            v1[edges[i][0]].push_back(edges[i][1]);
            v1[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int>v3;
        vector<bool>v2(n,false);
        for(int i=0;i<n;i++)
        {
            if(v2[i]==false)
            {
                f1(v1,v2,i,v3);
            }
        }
        long long int result=0;
        long long int sum=0;
        for(int i=0;i<v3.size();i++)
        {
            sum=sum + v3[i];
        }
        for(int i=0;i<v3.size();i++)
        {
            result=result+(v3[i] * (sum-v3[i]));
            sum=sum-v3[i];
        }
        return result;
    }
    void f1(vector<vector<int>>&v1,vector<bool>&v2,int i,vector<int>&v3)
    {
        queue<int>q1;
        q1.push(i);
        v2[i]=true;
        int count=0;
        while(!q1.empty())
        {
            int a=q1.front();
            q1.pop();
            count++;
            for(auto val:v1[a])
            {
                if(v2[val]==true)
                {
                    continue;
                }
                q1.push(val);
                v2[val]=true;
            }
        }
        v3.push_back(count);
    }
};
